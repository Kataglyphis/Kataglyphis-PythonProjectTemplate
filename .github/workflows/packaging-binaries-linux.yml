name: Build Linux Binaries

on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string

jobs:
  build-package-binaries-linux-x86-64:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Install system dependencies
        run: |
          chmod +x scripts/linux/setup-dependencies.sh
          ./scripts/linux/setup-dependencies.sh
          echo "/usr/bin" >> $GITHUB_PATH

      - name: Install uv (Astral)
        uses: astral-sh/setup-uv@v7.0.0
        with:
          python-version: 3.14t
          enable-cache: true

      # Optional: install Python pinned by project if you want: `uv python install`
      - name: Install project dependencies with uv (use lock if present)
        run: |
          if [ -f uv.lock ]; then
            echo "uv.lock found — using locked sync"
            uv sync --locked --dev --all-extras
          else
            echo "No uv.lock found — performing non-locked sync"
            uv sync --dev --all-extras
          fi

      - name: Build and rename Linux wheels
        env:
          CYTHONIZE: "True"
        run: |
          ARCH="$(uname -m)"
          # normalize common uname arch names to wheel platform tokens
          case "$ARCH" in
            x86_64) WHEEL_ARCH="x86_64" ;;
            i386|i686) WHEEL_ARCH="i686" ;;
            aarch64|arm64) WHEEL_ARCH="aarch64" ;;
            armv7l) WHEEL_ARCH="armv7l" ;;
            *) WHEEL_ARCH="$ARCH" ;;
          esac
          export CYTHONIZE="True"
          cp resources/packaging/binary/MANIFEST.in MANIFEST.in
          pip install --upgrade setuptools wheel cython build twine
          python3 setup.py build_ext --inplace
          # delete .py files inside your package (replace mypkg with your package dir)
          find kataglyphispythonpackage -type f -name '*.py' -print -delete
          python3 setup.py bdist_wheel
          # python3 -m build --no-isolation
          PYTHON_VERSION_SHORT=$(python3 -c 'import sys; print(f"{sys.version_info[0]}{sys.version_info[1]}")')
          PYTHON_ABI="cp${PYTHON_VERSION_SHORT}"
          PLATFORM="manylinux1_${WHEEL_ARCH}"
          TAG="${PYTHON_ABI}-${PYTHON_ABI}-${PLATFORM}"
          #for f in dist/*.whl; do
          #  mv "$f" "$(echo $f | sed "s/py3-none-any/$TAG/")"
          #done

      - name: Store distribution artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dist-artifact-${{ github.run_id }}
          path: dist/*
