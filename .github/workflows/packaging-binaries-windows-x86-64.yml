name: Packaging Windows Binaries
on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
env:
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true
  CLANG_VERSION: 21.1.1
  CYTHONIZE: True

jobs:
  packaging-windows:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python 3.13
        uses: actions/setup-python@v6.0.0
        with:
          python-version: "3.13"

      - name: Runner diagnostics & ensure Windows
        shell: pwsh
        run: |
          Write-Host "=== Runner diagnostics ==="
          Write-Host "OS env: $Env:OS"
          Write-Host "Runner label (runs-on input): ${{ inputs.runner }}"
          Write-Host "GITHUB_WORKSPACE: $Env:GITHUB_WORKSPACE"
          if ($Env:OS -ne 'Windows_NT') {
            Write-Error "This reusable workflow requires a Windows runner (e.g. 'windows-2022' or 'windows-latest'). Current runner is not Windows. Aborting."
            exit 1
          }
          Write-Host "PATH (truncated):"
          $Env:PATH.Split(';')[0..20] -join ';' | Write-Host
          Write-Host "Python version (if present):"
          python3 --version || Write-Host "python3 not found"
          Write-Host "cl.exe available?"
          Get-Command cl.exe -ErrorAction SilentlyContinue | ForEach-Object { $_.Path } || Write-Host "cl.exe not found (will try vcvarsall during build)"
          Write-Host "clang available?"
          Get-Command clang -ErrorAction SilentlyContinue | ForEach-Object { $_.Path } || Write-Host "clang not found"
          Write-Host "=== end diagnostics ==="

      - name: Install Windows Dependencies (safe call)
        shell: pwsh
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
          $script = Join-Path $Env:GITHUB_WORKSPACE "scripts/windows/setup-dependencies.ps1"
          if (-Not (Test-Path $script)) {
            Write-Error "Dependency setup script not found at $script"
            exit 1
          }
          pwsh -NoProfile -ExecutionPolicy Bypass -File $script -ClangVersion $Env:CLANG_VERSION

      - name: Push Clang and LLVM to Path
        shell: pwsh
        run: |
          $llvmPath = "C:\Program Files\LLVM\bin"
          if (Test-Path $llvmPath) {
            Add-Content -Path $Env:GITHUB_PATH -Value ("{0}`n" -f $llvmPath)
            Write-Host "Appended LLVM to GITHUB_PATH: $llvmPath"
          } else {
            Write-Host "LLVM path not found ($llvmPath). Continuing; setup-dependencies may have installed elsewhere."
          }

      - name: Prepare environment
        shell: pwsh
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
          python3 --version
          pip --version
          pip install --upgrade pip --verbose
          pip install ".[dev,test,docs]" --verbose

      - name: Build Windows binaries (pure PowerShell, import MSVC env if present)
        shell: pwsh
        env:
          CYTHONIZE: True
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
          $ErrorActionPreference = 'Stop'

          Write-Host "=== Build: attempt to import MSVC environment (vcvars) via vswhere if available ==="

          $vswherePath = Join-Path $Env:ProgramFiles(x86) "Microsoft Visual Studio\Installer\vswhere.exe"
          $VSINSTALL = $null

          if (Test-Path $vswherePath) {
            Write-Host "Found vswhere at $vswherePath"
            # vswhere prints the installation path
            $VSINSTALL = & $vswherePath -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath 2>$null
            $VSINSTALL = $VSINSTALL.Trim()
            if (-not $VSINSTALL) { $VSINSTALL = $null }
          } else {
            Write-Host "vswhere not found at $vswherePath"
          }

          if ($VSINSTALL) {
            Write-Host "Found Visual Studio at: $VSINSTALL"
            $vcvars = Join-Path $VSINSTALL "VC\Auxiliary\Build\vcvarsall.bat"
            if (-not (Test-Path $vcvars)) {
              Write-Host "vcvarsall.bat not present at expected location: $vcvars"
            } else {
              Write-Host "Calling vcvarsall.bat x64 and importing environment into PowerShell session..."
              # call vcvarsall in a cmd shell and capture its environment output (set)
              $cmd = '"' + $vcvars + '" x64 >nul && set'
              $envOutput = & cmd /c $cmd

              # parse and import env vars into current PowerShell process
              $lines = $envOutput -split "`r?`n"
              foreach ($ln in $lines) {
                if (-not $ln) { continue }
                $idx = $ln.IndexOf('=')
                if ($idx -lt 1) { continue }
                $name = $ln.Substring(0,$idx)
                $value = $ln.Substring($idx+1)
                # Only import a subset? We import all to mimic vcvars behavior
                try {
                  $Env:$name = $value
                } catch {
                  Write-Host "Warning: couldn't set env var $name"
                }
              }
              Write-Host "Imported MSVC environment variables into PowerShell session."
            }
          } else {
            Write-Host "No Visual Studio installation found via vswhere. Will attempt to build with clang if available."
          }

          Write-Host "=== Build: copy MANIFEST.in if present ==="
          $manifestSrc = Join-Path $Env:GITHUB_WORKSPACE "resources\packaging\binary\MANIFEST.in"
          if (Test-Path $manifestSrc) {
            Copy-Item -Path $manifestSrc -Destination (Join-Path $Env:GITHUB_WORKSPACE "MANIFEST.in") -Force
            Write-Host "Copied MANIFEST.in"
          } else {
            Write-Host "MANIFEST.in not found at $manifestSrc; continuing"
          }

          Write-Host "=== Build: install build dependencies ==="
          pip install --upgrade setuptools wheel cython build twine --verbose

          Write-Host "=== Build: python3 setup.py build_ext --inplace ==="
          python3 setup.py build_ext --inplace

          Write-Host "=== Build: python3 -m build ==="
          python3 -m build

          Write-Host "=== Build: rename wheels to cpXY-cpXY-win_amd64 ==="
          $python_version = (python3 -c 'import sys; print(f"{sys.version_info.major}{sys.version_info.minor}")').Trim()
          if (-not $python_version) {
            Write-Error "Could not detect python version"
            exit 1
          }
          $python_abi = "cp$python_version"
          $tag = "$python_abi-$python_abi-win_amd64"
          $distDir = Join-Path $Env:GITHUB_WORKSPACE "dist"
          if (-not (Test-Path $distDir)) {
            Write-Error "dist directory not found: $distDir"
            exit 1
          }
          $wheels = Get-ChildItem -Path $distDir -Filter '*.whl' -ErrorAction SilentlyContinue
          if (-not $wheels) {
            Write-Error "No wheel files found under $distDir"
            exit 1
          }
          foreach ($w in $wheels) {
            $new = $w.Name -replace 'py3-none-any', $tag
            if ($new -ne $w.Name) {
              Write-Host "Renaming $($w.Name) -> $new"
              Rename-Item -Path $w.FullName -NewName $new -Force
            } else {
              Write-Host "Skipping rename for $($w.Name) (pattern not matched)"
            }
          }

          Write-Host "=== Build finished ==="

      - name: Store distribution artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dist-artifact-${{ github.run_id }}
          path: dist/*
