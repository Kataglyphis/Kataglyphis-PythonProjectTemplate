name: Packaging Windows Binaries
on:
  workflow_call:
    inputs:
      runner:
        required: true
        type: string
env:
  ACTIONS_STEP_DEBUG: true
  ACTIONS_RUNNER_DEBUG: true
  CLANG_VERSION: 21.1.1
  CYTHONIZE: True

jobs:
  packaging-windows:
    runs-on: ${{ inputs.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Python 3.13
        uses: actions/setup-python@v6.0.0
        with:
          python-version: "3.13" 

      - name: Runner diagnostics & ensure Windows
        shell: pwsh
        run: |
          Write-Host "=== Runner diagnostics ==="
          Write-Host "OS env: $Env:OS"
          Write-Host "Runner label (runs-on input): ${{ inputs.runner }}"
          Write-Host "GITHUB_WORKSPACE: $Env:GITHUB_WORKSPACE"
          if ($Env:OS -ne 'Windows_NT') {
            Write-Error "This reusable workflow requires a Windows runner (e.g. 'windows-2022' or 'windows-latest'). Current runner is not Windows. Aborting."
            exit 1
          }
          Write-Host "PATH (truncated):"
          $Env:PATH.Split(';')[0..20] -join ';' | Write-Host
          Write-Host "Python version (if present):"
          python3 --version || Write-Host "python not found"
          Write-Host "cl.exe available?"
          Get-Command cl.exe -ErrorAction SilentlyContinue | ForEach-Object { $_.Path } || Write-Host "cl.exe not found (will try vcvarsall during build)"
          Write-Host "clang available?"
          Get-Command clang -ErrorAction SilentlyContinue | ForEach-Object { $_.Path } || Write-Host "clang not found"
          Write-Host "=== end diagnostics ==="

      - name: Install Windows Dependencies (safe call)
        shell: pwsh
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
          $script = Join-Path $Env:GITHUB_WORKSPACE "scripts/windows/setup-dependencies.ps1"
          if (-Not (Test-Path $script)) {
            Write-Error "Dependency setup script not found at $script"
            exit 1
          }
          pwsh -NoProfile -ExecutionPolicy Bypass -File $script -ClangVersion $Env:CLANG_VERSION

      - name: Push Clang and LLVM to Path
        shell: pwsh
        run: |
          $llvmPath = "C:\Program Files\LLVM\bin"
          if (Test-Path $llvmPath) {
            Add-Content -Path $Env:GITHUB_PATH -Value ("{0}`n" -f $llvmPath)
            Write-Host "Appended LLVM to GITHUB_PATH: $llvmPath"
          } else {
            Write-Host "LLVM path not found ($llvmPath). Continuing; setup-dependencies may have installed elsewhere."
          }

      - name: Prepare environment
        shell: pwsh
        run: |
          Set-ExecutionPolicy -Scope Process -ExecutionPolicy Bypass -Force
          python3 --version
          pip --version
          pip install --upgrade pip --verbose
          pip install ".[dev,test,docs]" --verbose

      - name: Build Windows binaries (initialize VS tools then build)
        shell: cmd
        env:
          CYTHONIZE: True
        run: |
          @echo off
          rem --- attempt to locate Visual Studio via vswhere ---
          set "VSINSTALL="
          if exist "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" (
            for /f "delims=" %%I in ('"%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -requires Microsoft.VisualStudio.Component.VC.Tools.x86.x64 -property installationPath') do set "VSINSTALL=%%I"
          )

          if defined VSINSTALL (
            echo Found Visual Studio at %VSINSTALL%
            echo Calling vcvarsall.bat x64 to initialize MSVC environment...
            call "%VSINSTALL%\VC\Auxiliary\Build\vcvarsall.bat" x64
          ) else (
            echo WARNING: Visual Studio (vc tools) not found via vswhere. Build will attempt to proceed with clang if available.
          )

          rem --- Copy MANIFEST.in if present ---
          if exist resources\packaging\binary\MANIFEST.in (
            copy /Y resources\packaging\binary\MANIFEST.in MANIFEST.in >nul
            echo Copied MANIFEST.in
          ) else (
            echo MANIFEST.in not found at resources\packaging\binary\MANIFEST.in
          )

          rem --- Install build deps and build ---
          pip install --upgrade setuptools wheel cython build twine --verbose
          echo Running build_ext --inplace
          python3 setup.py build_ext --inplace

          echo Running python -m build
          python3 -m build

          rem --- Rename universal wheels to cpXX-cpXX-win_amd64 tag ---
          powershell -NoProfile -Command ^
            "$python_version = (python -c 'import sys; print(f\"{sys.version_info.major}{sys.version_info.minor}\")'); ^
             $python_abi = 'cp' + $python_version; ^
             $tag = $python_abi + '-' + $python_abi + '-win_amd64'; ^
             Get-ChildItem dist\\*.whl -ErrorAction SilentlyContinue | ForEach-Object { ^
               $new = ($_.Name -replace 'py3-none-any', $tag); ^
               Write-Host \"Renaming $($_.Name) -> $new\"; ^
               Rename-Item $_.FullName -NewName $new -Force ^
             }"

          if not exist dist\*.whl (
            echo ERROR: No wheel produced under dist\.
            exit /b 1
          )

      - name: Store distribution artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: dist-artifact-${{ github.run_id }}
          path: dist/*
